{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///./src/view.js","webpack:///./src/draw.js","webpack:///./src/shaders.js","webpack:///./src/tex-board.js","webpack:///./src/draw-setup.js","webpack:///./src/tex-pieceshadow.js","webpack:///./src/mesh-piece.js","webpack:///./src/gameplay.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","PI","out","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","fn","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","v1","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","unprojectMousePos","_ref2","_ref3","viewmtx","proj","_ref4","_slicedToArray","mx","my","eyePos","vec3","mat4","ray_clip","vec4","invProj","ray_eye","ray_wor","eyeDir","rayPos","rayDir","planeNormal","planeDist","result","_intersectRayVsPlane","LIGHT_NORMAL_0","LIGHT_NORMAL_1","drawModelSetup","_ref","model","invviewmtx","modelView","modelViewProjection","invModel","transformLightNormal","wsDirection","wsNormal","msNormal4","lightNormal0","lightNormal1","_drawBoard","renderState","setupInfo","boardParams","gl","boardShader","board","texture","colour","useProgram","program","bindTexture","TEXTURE_2D","uniform1i","uniforms","uTex","uniform4fv","uColour","uniformMatrix4fv","uModelViewProjection","bindBuffer","ARRAY_BUFFER","vertexBuffer","enableVertexAttribArray","attributes","aVertexPosition","vertexAttribPointer","vertexNumComponents","FLOAT","texCoordBuffer","aTexCoord","drawArrays","TRIANGLES","vertexCount","drawPieceShadow","isGlowing","tex_pieceshadow","drawPiece","alpha","pieceShader","sphere","uGlobalColor","uniform3fv","uLightNormal0","uLightNormal1","uEyePosition","normalBuffer","aVertexNormal","ELEMENT_ARRAY_BUFFER","elementBuffer","drawElements","numTriangles","UNSIGNED_SHORT","drawScene","gameState","boardConfig","glCanvas","viewInfo","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","CULL_FACE","frontFace","CW","colorMask","viewport","width","height","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","getPieceModelMatrix","gridx","gridy","_getWorldPosFromGridP2","draw_slicedToArray","marginFrac","imageMargin","imageDim","d0","worldDim","d1","numLines","getWorldPosFromGridPos","colours","white","black","DEPTH_TEST","tex_board","drawBoard","disable","gy","gx","getGridState","mtx","nextPieceColour","mouse_gridPos","boardVertexShader","boardFragmentShader","pieceVertexShader","pieceFragmentShader","makeTextureImage","h","margin","dot_radius","dot_feather_radius","num_lines","pixels","Uint8Array","gpy","gpx","tex_board_slicedToArray","dot_x","dot_y","outer_radius","dist2","frac","drawDot","fmt","drawSetup","uploadShader","vertex","fragment","uploadTexture","_loop","dx","dy","x3","makeTextureImagePieceShadow","uploadMesh","vertexArray","texCoordArray","num_vertices","vy","num_y_verts","slice_radius","vr","console","error","elementArray","Uint16Array","num_triangles","v0_index","v1_index","normalArray","i0","i1","i2","p0","apply","_toConsumableArray","map","j","p1","p2","u","makePieceMesh","createProgram","_arr","VERTEX_SHADER","FRAGMENT_SHADER","_i","_arr$_i","draw_setup_slicedToArray","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","concat","getShaderInfoLog","Error","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","reduce","pv","uniformName","assign","_defineProperty","getUniformLocation","attributeName","getAttribLocation","ext","getExtension","glFmt","RGB","RGBA","tex","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","LINEAR","TEXTURE_MAG_FILTER","texImage2D","UNSIGNED_BYTE","generateMipmap","getParameter","MAX_TEXTURE_MAX_ANISOTROPY_EXT","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","createBuffer","bufferData","STATIC_DRAW","GameState","cameraAngle","_classCallCheck","this","_calcViewInfo","mousePos","status","gridState","_createClass","ymax","xmax","ymin","xmin","getProjectionMatrix","message","_len","arguments","params","_key","_onMouseMove","_onClick","_setCameraAngle","_ref5","gameplay_slicedToArray","old_gridPos","gameplay_toConsumableArray","commands","_setGridState","_checkVictory","push","_this","check","xstep","ystep","num","persistentState","blackPlayer","whitePlayer","wins","Player 1","Player 2","runCommands","commandHandlers","repaint","window","requestAnimationFrame","nextPlayer","el","document","getElementById","className","innerText","incrementWinCount","playerId","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","iterator","next","done","_step$value","_toArray","cmd","cmdArgs","slice","main_toConsumableArray","err","return","addEventListener","getContext","fullWidth","e","documentElement","g","getElementsByTagName","innerWidth","clientWidth","event","update","pos","rect","getBoundingClientRect","clientX","clientY","getRelativeMousePosition","clientHeight","getNoPaddingNoBorderCanvasRelativeMousePosition","switchColours","getGameStatus","confirm","tmp"],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import {mat4, vec3, vec4} from 'gl-matrix';\n\nexport function getProjectionMatrix({glCanvas}) {\n  const fovy = 45 * Math.PI / 180.0;\n  const far = 1000;\n  const near = 0.01;\n\n  const ymax = near * Math.tan(fovy / 2);\n  const xmax = ymax * glCanvas.width / glCanvas.height;\n  const ymin = -ymax;\n  const xmin = -xmax;\n\n  const proj = mat4.create();\n\n  proj[0*4+0] = (2 * near) / (xmax - xmin);\n  proj[1*4+0] = 0;\n  proj[2*4+0] = (xmax + xmin) / (xmax - xmin);\n  proj[3*4+0] = 0;\n  proj[0*4+1] = 0;\n  proj[1*4+1] = (2 * near) / (ymax - ymin);\n  proj[2*4+1] = (ymax + ymin) / (ymax - ymin);\n  proj[3*4+1] = 0;\n  proj[0*4+2] = 0;\n  proj[1*4+2] = 0;\n  proj[2*4+2] = -(far + near) / (far - near);\n  proj[3*4+2] = -(2 * far * near) / (far - near);\n  proj[0*4+3] = 0;\n  proj[1*4+3] = 0;\n  proj[2*4+3] = -1;\n  proj[3*4+3] = 0;\n\n  return proj;\n}\n\n// take world coordinates and convert to grid (0-14) inclusive\n// or null if off the grid\nexport function getGridPos(boardConfig, wx, wy) {\n  const marginFrac = boardConfig.imageMargin / boardConfig.imageDim;\n  const d0 = boardConfig.worldDim * -0.5 + marginFrac;\n  const d1 = boardConfig.worldDim * 0.5 - marginFrac;\n  const gridx = Math.round((boardConfig.numLines - 1) * (wx - d0) / (d1 - d0));\n  const gridy = Math.round((boardConfig.numLines - 1) * (wy - d0) / (d1 - d0));\n  if (gridx >= 0 && gridy >= 0 && gridx < boardConfig.numLines && gridy < boardConfig.numLines) {\n    return [gridx, gridy];\n  } else {\n    return null;\n  }\n}\n\n// gridx/gridy are positions from 0-14 inclusive\n// opposite of getGridPos\nexport function getWorldPosFromGridPos(boardConfig, gridx, gridy) {\n  const marginFrac = boardConfig.imageMargin / boardConfig.imageDim;\n  const d0 = boardConfig.worldDim * -0.5 + marginFrac;\n  const d1 = boardConfig.worldDim * 0.5 - marginFrac;\n  const mx = d0 + (d1 - d0) * gridx / (boardConfig.numLines - 1);\n  const my = d0 + (d1 - d0) * gridy / (boardConfig.numLines - 1);\n  return [mx, my];\n}\n\n// get the position of the mouse in worldspace, on the board plane\nexport function unprojectMousePos({viewmtx, proj}, [mx, my]) {\n  // math from http://antongerdelan.net/opengl/raycasting.html\n\n  // get starting point of mouse \"ray\" (eye pos in worldspace)\n  const eyePos = vec3.create();\n  mat4.getTranslation(eyePos, viewmtx);\n\n  // get direction of mouse ray\n  const ray_clip = vec4.fromValues(mx * 2 - 1, (1 - my) * 2 - 1, -1, 1);\n  // transform from clipspace to camera space\n  const invProj = mat4.create();\n  mat4.invert(invProj, proj);\n  const ray_eye = vec4.create();\n  vec4.transformMat4(ray_eye, ray_clip, invProj);\n  ray_eye[2] = -1;\n  ray_eye[3] = 0;\n  // transform from camera space to worldspace\n  const ray_wor = vec4.create();\n  vec4.transformMat4(ray_wor, ray_eye, viewmtx);\n  const eyeDir = vec3.fromValues(ray_wor[0], ray_wor[1], ray_wor[2]);\n  vec3.normalize(eyeDir, eyeDir);\n\n  // intersect with board plane\n  const boardPlaneNormal = vec3.fromValues(0, 0, 1);\n  const boardPlaneDist = 0;\n\n  return _intersectRayVsPlane(\n    eyePos,\n    eyeDir,\n    boardPlaneNormal,\n    boardPlaneDist,\n  );\n}\n\nfunction _intersectRayVsPlane(rayPos, rayDir, planeNormal, planeDist) {\n  const s = vec3.dot(planeNormal, rayDir);\n  const t = (planeDist - vec3.dot(planeNormal, rayPos)) / s;\n\n  const result = vec3.create();\n  vec3.scale(result, rayDir, t);\n  vec3.add(result, result, rayPos);\n  return result;\n}\n","import {mat4, vec3, vec4} from 'gl-matrix';\n\nimport {getWorldPosFromGridPos} from './view';\n\n// there are two light sources. they are infinitely distant, thus specified by\n// directions rather than by positions. the direction points \"backward\" (hence\n// the name \"light normal\").\n// the first light contributes diffuse and specular lighting, the second is\n// only specular (see the shader).\nconst LIGHT_NORMAL_0 = vec3.fromValues(-0.5, -0.5, 1);\nconst LIGHT_NORMAL_1 = vec3.fromValues(0, 2, 1);\n\nfunction drawModelSetup({proj, viewmtx, invviewmtx}, model) {\n  const modelView = mat4.create();\n  mat4.multiply(modelView, invviewmtx, model);\n\n  const modelViewProjection = mat4.create();\n  mat4.multiply(modelViewProjection, proj, modelView);\n\n  const invModel = mat4.create();\n  mat4.invert(invModel, model);\n\n  const eyePos = vec3.create();\n  mat4.getTranslation(eyePos, viewmtx);\n  vec3.transformMat4(eyePos, eyePos, invModel);\n\n  const transformLightNormal = (wsDirection) => {\n    const wsNormal = vec3.create();\n    vec3.normalize(wsNormal, wsDirection);\n    const msNormal4 = vec4.fromValues(wsNormal[0], wsNormal[1], wsNormal[2], 0);\n    vec4.transformMat4(msNormal4, msNormal4, invModel);\n    return vec3.fromValues(msNormal4[0], msNormal4[1], msNormal4[2]);\n  };\n\n  return {\n    modelViewProjection,\n    // the following have all been transformed into model space\n    eyePos,\n    lightNormal0: transformLightNormal(LIGHT_NORMAL_0),\n    lightNormal1: transformLightNormal(LIGHT_NORMAL_1),\n  };\n}\n\nfunction _drawBoard(renderState, setupInfo, boardParams) {\n  const {gl, boardShader, board} = renderState;\n  const {modelViewProjection} = setupInfo;\n  const {texture, colour} = boardParams;\n\n  gl.useProgram(boardShader.program);\n\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  gl.uniform1i(boardShader.uniforms.uTex, 0);\n  gl.uniform4fv(boardShader.uniforms.uColour, colour);\n  gl.uniformMatrix4fv(boardShader.uniforms.uModelViewProjection, false, modelViewProjection);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, board.vertexBuffer);\n  gl.enableVertexAttribArray(boardShader.attributes.aVertexPosition);\n  gl.vertexAttribPointer(boardShader.attributes.aVertexPosition, board.vertexNumComponents, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, board.texCoordBuffer);\n  gl.enableVertexAttribArray(boardShader.attributes.aTexCoord);\n  gl.vertexAttribPointer(boardShader.attributes.aTexCoord, 2, gl.FLOAT, false, 0, 0);\n\n  gl.drawArrays(gl.TRIANGLES, 0, board.vertexCount);\n}\n\nfunction drawBoard(renderState, setupInfo) {\n  _drawBoard(renderState, setupInfo, {\n    texture: renderState.tex_board,\n    colour: vec4.fromValues(1, 1, 1, 1),\n  });\n}\n\nfunction drawPieceShadow(renderState, setupInfo, {isGlowing}) {\n  _drawBoard(renderState, setupInfo, {\n    texture: renderState.tex_pieceshadow,\n    colour: isGlowing\n      ? vec4.fromValues(1, 0, 0, 1)\n      : vec4.fromValues(0, 0, 0, 1),\n  });\n}\n\nfunction drawPiece(renderState, setupInfo, {colour, alpha}) {\n  const {gl, pieceShader, sphere} = renderState;\n  const {modelViewProjection, eyePos, lightNormal0, lightNormal1} = setupInfo;\n\n  gl.useProgram(pieceShader.program);\n\n  gl.uniformMatrix4fv(pieceShader.uniforms.uModelViewProjection, false, modelViewProjection);\n  gl.uniform4fv(pieceShader.uniforms.uGlobalColor, vec4.fromValues(colour[0], colour[1], colour[2], alpha));\n  gl.uniform3fv(pieceShader.uniforms.uLightNormal0, lightNormal0);\n  gl.uniform3fv(pieceShader.uniforms.uLightNormal1, lightNormal1);\n  gl.uniform3fv(pieceShader.uniforms.uEyePosition, eyePos);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, sphere.vertexBuffer);\n  gl.enableVertexAttribArray(pieceShader.attributes.aVertexPosition);\n  gl.vertexAttribPointer(pieceShader.attributes.aVertexPosition, sphere.vertexNumComponents, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, sphere.normalBuffer);\n  gl.enableVertexAttribArray(pieceShader.attributes.aVertexNormal);\n  gl.vertexAttribPointer(pieceShader.attributes.aVertexNormal, sphere.vertexNumComponents, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sphere.elementBuffer);\n  gl.drawElements(gl.TRIANGLES, 3 * sphere.numTriangles, gl.UNSIGNED_SHORT, 0);\n}\n\nexport function drawScene(renderState, gameState, boardConfig) {\n  const {gl, glCanvas} = renderState;\n  const {viewInfo} = gameState;\n\n  gl.enable(gl.BLEND);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n  gl.enable(gl.CULL_FACE);\n  gl.frontFace(gl.CW);\n\n  gl.colorMask(true, true, true, true);\n  gl.viewport(0, 0, glCanvas.width, glCanvas.height);\n  gl.clearColor(1, 1, 1, 1);\n  gl.clearDepth(1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // disable alpha writing. this works around a difference between webgl and opengl\n  // that i don't really understand... other workarounds include passing the option\n  // {premultipliedAlpha: false} to canvas.getContext (doesn't work in chrome,\n  // apparently) and setting style=\"background: black\" on the canvas element.\n  // more info here:\n  // https://webglfundamentals.org/webgl/lessons/webgl-and-alpha.html\n  gl.colorMask(true, true, true, false);\n\n  // gridx/gridy are positions from 0-14 inclusive\n  const getPieceModelMatrix = (gridx, gridy, z) => {\n    const [mx, my] = getWorldPosFromGridPos(boardConfig, gridx, gridy);\n    const model = mat4.create();\n    mat4.translate(model, model, vec3.fromValues(mx, my, z));\n    // TODO - add on to board model matrix\n    return model;\n  };\n\n  const colours = {\n    'white': [0.95, 0.95, 0.95],\n    'black': [0.2, 0.2, 0.2],\n  };\n\n  // draw board\n  gl.enable(gl.DEPTH_TEST);\n  const mtx = mat4.create();\n  const setupInfo = drawModelSetup(viewInfo, mtx);\n  drawBoard(renderState, setupInfo);\n\n  // draw shadows\n  gl.disable(gl.DEPTH_TEST);\n  for (let gy = 0; gy < boardConfig.numLines; gy++) {\n    for (let gx = 0; gx < boardConfig.numLines; gx++) {\n      const value = gameState.getGridState(gx, gy);\n      if (value !== null) {\n        const mtx = getPieceModelMatrix(gx, gy, 0);\n        if (value.isGlowing) {\n          const scale = (0.03 / 0.5) * 2;\n          mat4.scale(mtx, mtx, vec3.fromValues(scale, scale, scale));\n        } else {\n          const scale = (0.03 / 0.5) * 1.55;\n          mat4.scale(mtx, mtx, vec3.fromValues(scale, scale, scale));\n        }\n        const setupInfo = drawModelSetup(viewInfo, mtx);\n        drawPieceShadow(renderState, setupInfo, {\n          isGlowing: value.isGlowing,\n        });\n      }\n    }\n  }\n  gl.enable(gl.DEPTH_TEST);\n\n  // draw pieces\n\n  for (let gy = 0; gy < boardConfig.numLines; gy++) {\n    for (let gx = 0; gx < boardConfig.numLines; gx++) {\n      const value = gameState.getGridState(gx, gy);\n      if (value !== null) {\n        const mtx = getPieceModelMatrix(gx, gy, 0.005);\n        const setupInfo = drawModelSetup(viewInfo, mtx);\n        drawPiece(renderState, setupInfo, {\n          colour: colours[value.colour],\n          alpha: 1.0,\n        });\n      }\n    }\n  }\n\n  // place translucent tile at mouse pos -> snapped grid loc\n  if (gameState.nextPieceColour !== null && gameState.mouse_gridPos !== null) {\n    const mtx = getPieceModelMatrix(gameState.mouse_gridPos[0], gameState.mouse_gridPos[1], 0.005);\n    const setupInfo = drawModelSetup(viewInfo, mtx);\n    drawPiece(renderState, setupInfo, {\n      colour: colours[gameState.nextPieceColour],\n      alpha: 0.3,\n    });\n  }\n}\n","export const boardVertexShader = `\nattribute vec3 aVertexPosition;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewProjection;\n\nvarying vec3 vPosition;\nvarying vec2 vTexCoord;\n\nvoid main() {\n  gl_Position = uModelViewProjection * vec4(aVertexPosition, 1.0);\n  vPosition = aVertexPosition;\n  vTexCoord = aTexCoord;\n}\n`;\n\nexport const boardFragmentShader = `\n#ifdef GL_ES\n  precision highp float;\n#endif\n\nuniform sampler2D uTex;\nuniform vec4 uColour;\n\nvarying vec3 vPosition;\nvarying vec2 vTexCoord;\n\nvoid main() {\n  vec4 colour = texture2D(uTex, vTexCoord) * uColour;\n\n  // this vignette effect was intended for the board, but it gets applied to\n  // pieceshadows too... oh well, they still look fine\n  float f = 1.0 - min(1.0, length(vPosition) / 2.5);\n\n  gl_FragColor.rgb = colour.rgb * f;\n  gl_FragColor.a = colour.a;\n}\n`;\n\nexport const pieceVertexShader = `\nattribute vec3 aVertexPosition;\nattribute vec3 aVertexNormal;\n\nuniform mat4 uModelViewProjection;\n\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\nvoid main() {\n  gl_Position = uModelViewProjection * vec4(aVertexPosition, 1.0);\n  vNormal = aVertexNormal;\n  vPosition = aVertexPosition;\n}\n`;\n\nexport const pieceFragmentShader = `\n#ifdef GL_ES\n  precision highp float;\n#endif\n\nuniform vec4 uGlobalColor;\nuniform vec3 uLightNormal0;\nuniform vec3 uLightNormal1;\nuniform vec3 uEyePosition;\n\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\nvoid main() {\n  vec3 normal = normalize(vNormal);\n\n  float diffuse = dot(uLightNormal0, normal);\n  diffuse = diffuse * 0.7 + 0.3;\n  diffuse = max(0.0, diffuse) * 0.5 + 0.5;\n\n  vec3 reflectedLightNormal0 = 2.0 * normal * dot(normal, uLightNormal0) - uLightNormal0;\n  vec3 reflectedLightNormal1 = 2.0 * normal * dot(normal, uLightNormal1) - uLightNormal1;\n\n  vec3 eyeNormal = normalize(uEyePosition - vPosition);\n\n  float d;\n\n  d = max(0.0, dot(eyeNormal, reflectedLightNormal0));\n  vec3 spec0 = vec3(0.5, 0.5, 0.45) * pow(d, 32.0);\n\n  d = max(0.0, dot(eyeNormal, reflectedLightNormal1));\n  vec3 spec1 = vec3(0.3) * pow(d, 32.0);\n\n  vec4 colour = uGlobalColor;\n  gl_FragColor = vec4(colour.rgb * diffuse + spec0 + spec1, colour.a);\n}\n`;\n","export function makeTextureImage(boardConfig) {\n  const w = boardConfig.imageDim;\n  const h = boardConfig.imageDim;\n  const margin = boardConfig.imageMargin; // number of pixels around the grid (actually distance to centre of outer grid line)\n  const line_radius = 0; // line width will be (1 + 2 * line_radius) pixels\n  const dot_radius = 3;\n  const dot_feather_radius = 0;\n  const num_lines = boardConfig.numLines;\n  const border_width = 1;\n\n  const pixels = new Uint8Array(w * h * 3);\n  // background fill\n  for (let i = 0; i < w * h; i++) {\n    pixels[i * 3 + 0] = 238;\n    pixels[i * 3 + 1] = 209;\n    pixels[i * 3 + 2] = 165;\n  }\n  // outer border\n  for (let x = 0; x < w; x++) {\n    for (let y = 0; y < border_width; y++) {\n      for (let i = 0; i < 3; i++) {\n        pixels[(y * w + x) * 3 + i] = 0;\n      }\n    }\n    for (let y = h - border_width; y < h; y++) {\n      for (let i = 0; i < 3; i++) {\n        pixels[(y * w + x) * 3 + i] = 0;\n      }\n    }\n  }\n  for (let y = 0; y < h; y++) {\n    for (let x = 0; x < border_width; x++) {\n      for (let i = 0; i < 3; i++) {\n        pixels[(y * w + x) * 3 + i] = 0;\n      }\n    }\n    for (let x = w - border_width; x < w; x++) {\n      for (let i = 0; i < 3; i++) {\n        pixels[(y * w + x) * 3 + i] = 0;\n      }\n    }\n  }\n  // grid\n  for (let gy = 0; gy < num_lines; gy++) {\n    const gpy = margin + Math.round(gy * (h - 2 * margin) / (num_lines - 1));\n    const y0 = Math.max(gpy - line_radius, 0);\n    const y1 = Math.min(gpy + line_radius, h - 1);\n    for (let y = y0; y <= y1; y++) {\n      for (let x = margin; x < w - margin; x++) {\n        const i = y * w + x;\n        pixels[i * 3 + 0] = 0;\n        pixels[i * 3 + 1] = 0;\n        pixels[i * 3 + 2] = 0;\n      }\n    }\n  }\n  for (let gx = 0; gx < num_lines; gx++) {\n    const gpx = margin + Math.round(gx * (w - 2 * margin) / (num_lines - 1));\n    const x0 = Math.max(gpx - line_radius, 0);\n    const x1 = Math.min(gpx + line_radius, w - 1);\n    for (let x = x0; x <= x1; x++) {\n      for (let y = margin; y < h - margin; y++) {\n        const i = y * w + x;\n        pixels[i * 3 + 0] = 0;\n        pixels[i * 3 + 1] = 0;\n        pixels[i * 3 + 2] = 0;\n      }\n    }\n  }\n  function drawDot(dot_x, dot_y) {\n    const outer_radius = dot_radius + dot_feather_radius;\n    for (let y = -outer_radius; y <= outer_radius; y++) {\n      for (let x = -outer_radius; x <= outer_radius; x++) {\n        const i = (dot_y + y) * w + (dot_x + x);\n        const dist2 = Math.sqrt(x * x + y * y) - Math.sqrt(dot_radius * dot_radius);\n        if (dist2 < -dot_feather_radius) {\n          pixels[i * 3 + 0] = 0;\n          pixels[i * 3 + 1] = 0;\n          pixels[i * 3 + 2] = 0;\n        } else if (dist2 < dot_feather_radius) {\n          const frac = (dist2 + dot_feather_radius) / (dot_feather_radius * 2);\n          pixels[i * 3 + 0] = Math.floor(pixels[i * 3 + 0] * frac + 0.5);\n          pixels[i * 3 + 1] = Math.floor(pixels[i * 3 + 1] * frac + 0.5);\n          pixels[i * 3 + 2] = Math.floor(pixels[i * 3 + 2] * frac + 0.5);\n        }\n      }\n    }\n  }\n  const dots = [\n    [7, 7],\n    [3, 3],\n    [3, 11],\n    [11, 3],\n    [11, 11],\n  ];\n  dots.forEach(([x, y]) => {\n    drawDot(\n      Math.round(margin + (w - 2 * margin) * x / (num_lines - 1)),\n      Math.round(margin + (h - 2 * margin) * y / (num_lines - 1)),\n    );\n  });\n  return {w, h, pixels, fmt: 'rgb'};\n}\n","import {makePieceMesh} from './mesh-piece';\nimport {boardFragmentShader, boardVertexShader, pieceFragmentShader, pieceVertexShader} from './shaders';\nimport {makeTextureImage} from './tex-board';\nimport {makeTextureImagePieceShadow} from './tex-pieceshadow';\n\nexport function drawSetup(glCanvas, gl, boardConfig) {\n  return {\n    glCanvas,\n    gl,\n    boardShader: uploadShader(gl, {\n      vertex: boardVertexShader,\n      fragment: boardFragmentShader,\n      uniforms: ['uTex', 'uColour', 'uModelViewProjection'],\n      attributes: ['aVertexPosition', 'aTexCoord'],\n    }),\n    pieceShader: uploadShader(gl, {\n      vertex: pieceVertexShader,\n      fragment: pieceFragmentShader,\n      uniforms: ['uGlobalColor', 'uLightNormal0', 'uLightNormal1', 'uEyePosition', 'uModelViewProjection'],\n      attributes: ['aVertexPosition', 'aVertexNormal'],\n    }),\n    tex_board: uploadTexture(gl, makeTextureImage(boardConfig)),\n    tex_pieceshadow: uploadTexture(gl, makeTextureImagePieceShadow()),\n    board: uploadMesh(gl, {\n      // TODO - use boardConfig.worldDim?\n      vertexArray: new Float32Array([\n        // triangle 1\n        -0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, -0.5, 0,\n        // triangle 2\n        -0.5, 0.5, 0, 0.5, -0.5, 0, -0.5, -0.5, 0,\n      ]),\n      texCoordArray: new Float32Array([\n        0.0, 1.0, 1.0, 1.0, 1.0, 0.0,\n        0.0, 1.0, 1.0, 0.0, 0.0, 0.0,\n      ]),\n    }),\n    sphere: uploadMesh(gl, makePieceMesh()),\n  };\n}\n\nfunction uploadShader(gl, {vertex, fragment, uniforms, attributes}) {\n  const program = gl.createProgram();\n\n  for (let [type, source] of [\n    [gl.VERTEX_SHADER, vertex],\n    [gl.FRAGMENT_SHADER, fragment],\n  ]) {\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.log(`Error compiling ${type === gl.VERTEX_SHADER ? 'vertex' : 'fragment'} shader:`);\n      console.log(gl.getShaderInfoLog(shader));\n      throw new Error('shader compilation failed');\n    }\n\n    gl.attachShader(program, shader);\n  }\n\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log('Error linking shader program:');\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('shader link failed');\n  }\n\n  return {\n    program,\n    uniforms: uniforms.reduce((pv, uniformName) => Object.assign(pv, {\n      [uniformName]: gl.getUniformLocation(program, uniformName),\n    }), {}),\n    attributes: attributes.reduce((pv, attributeName) => Object.assign(pv, {\n      [attributeName]: gl.getAttribLocation(program, attributeName),\n    }), {}),\n  };\n}\n\nfunction uploadTexture(gl, {w, h, pixels, fmt}) {\n  // use anisotropic filtering if available. if it's not available,\n  // disable mipmapping\n\n  let ext =\n    gl.getExtension('EXT_texture_filter_anisotropic') ||\n    gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n    gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n  // ext = null;\n\n  const glFmt = (() => {\n    switch (fmt) {\n      case 'rgb': return gl.RGB;\n      case 'rgba': return gl.RGBA;\n      default:\n        throw new Error('uploadTexture: bad fmt:', fmt);\n    }\n  })();\n\n  const tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, ext ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  gl.texImage2D(gl.TEXTURE_2D, 0, glFmt, w, h, 0, glFmt, gl.UNSIGNED_BYTE, pixels);\n  if (ext) {\n    gl.generateMipmap(gl.TEXTURE_2D);\n    const max = gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    gl.texParameterf(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, max);\n  }\n  return tex;\n}\n\nfunction uploadMesh(gl, {vertexArray, normalArray, texCoordArray, elementArray}) {\n  const vertexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, vertexArray, gl.STATIC_DRAW);\n\n  const normalBuffer = normalArray && gl.createBuffer() || null;\n  if (normalBuffer !== null) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, normalArray, gl.STATIC_DRAW);\n  }\n\n  const texCoordBuffer = texCoordArray && gl.createBuffer() || null;\n  if (texCoordBuffer !== null) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, texCoordArray, gl.STATIC_DRAW);\n  }\n\n  const elementBuffer = elementArray && gl.createBuffer() || null;\n  if (elementBuffer !== null) {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementArray, gl.STATIC_DRAW);\n  }\n\n  return {\n    vertexBuffer,\n    vertexNumComponents: 3,\n    vertexCount: vertexArray.length / 3,\n    normalBuffer,\n    texCoordBuffer,\n    elementBuffer,\n    numTriangles: elementArray ? elementArray.length / 3 : 0,\n  };\n}\n","export function makeTextureImagePieceShadow() {\n  const w = 64;\n  const h = 64;\n  const pixels = new Uint8Array(w * h * 4);\n  for (let y = 0; y < h; y++) {\n    for (let x = 0; x < w; x++) {\n      const dx = x / (w - 1) * 2 - 1;\n      const dy = y / (h - 1) * 2 - 1;\n      const dist = Math.sqrt(dx * dx + dy * dy);\n      let alpha = Math.max(0, 1 - dist);\n      if (alpha < 0) alpha = 0; if (alpha > 1) alpha = 1;\n      alpha = (() => {\n        const x = alpha;\n        // cubic hermite curve\n        // return x * x * (3 - 2 * x);\n        // quintic hermite curve\n        // return x * x * x * (x * (x * 6 - 15) + 10);\n        // faster than perlin quintic. i think this one is the blackest....\n        const x3 = x*x*x; return (7 + (x3 - 7) * x) * x3;\n        // C1\n        // return 1 - Math.pow(1 - x * x, 2);\n      })();\n      const i = y * w + x;\n      pixels[i * 4 + 0] = 255;\n      pixels[i * 4 + 1] = 255;\n      pixels[i * 4 + 2] = 255;\n      pixels[i * 4 + 3] = Math.floor(alpha * 255 + 0.5);\n    }\n  }\n  return {w, h, pixels, fmt: 'rgba'};\n}\n// https://briansharpe.wordpress.com/2011/11/14/two-useful-interpolation-functions-for-noise-development/\n\n/*//    Quintic Hermite Curve.  As used by Perlin in Improved Noise.  http://mrl.nyu.edu/~perlin/paper445.pdf\n//    6x^5-15x^4+10x^3\nfloat Interpolation_C2( float x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }\n\n//    Faster than Perlin Quintic.  Not quite as good shape.\n//    7x^3-7x^4+x^7\nfloat Interpolation_C2_Fast( float x ) { float x3 = x*x*x; return ( 7.0 + ( x3 - 7.0 ) * x ) * x3; }\n\n//    C3 Interpolation function.  If anyone ever needs it... : )\n//    25x^4-48x^5+25x^6-x^10\nfloat Interpolation_C3( float x ) { float xsq = x*x; float xsqsq = xsq*xsq; return xsqsq * ( 25.0 - 48.0 * x + xsq * ( 25.0 - xsqsq ) ); }*/\n\n\n/*//\n//  For interest here are some smooth interpolation functions defined in x-squared\n//\n//  C1:      f(x) = 1.0 - ( 1.0 - x*x )^2\n//  C2:      f(x) = 9x^4-16x^6+9x^8-x^12\n//  C2 Fast: f(x) = 5x^4-5x^6+x^10  or  f(x) = 3x^4-3x^8+x^12\n//  C3:      f(x) = 10x^4-20x^6+15x^8-4x^10*/\n","import {vec3} from 'gl-matrix';\n\nexport function makePieceMesh() {\n  const horz_radius = 0.03;\n  const vert_radius = 0.01;\n\n  const num_verts_around = 32;\n  const num_y_verts = 16;\n\n  const num_vertices = 2 + num_verts_around * (num_y_verts - 2);\n\n  const vertexArray = new Float32Array(num_vertices * 3);\n\n  let i = 0;\n\n  vertexArray[i * 3 + 0] = 0;\n  vertexArray[i * 3 + 1] = 0;\n  vertexArray[i * 3 + 2] = -vert_radius;\n  i++;\n  for (let vy = 1; vy < num_y_verts - 1; vy++) {\n    const z = -1 + 2 * vy / (num_y_verts - 1);\n    const slice_radius = Math.sqrt(1 - z * z) * horz_radius;\n    for (let vr = 0; vr < num_verts_around; vr++) {\n      const rad = (vr / num_verts_around) * 2 * Math.PI;\n      const c = Math.cos(rad);\n      const s = Math.sin(rad);\n      vertexArray[i * 3 + 0] = c * slice_radius;\n      vertexArray[i * 3 + 1] = s * slice_radius;\n      vertexArray[i * 3 + 2] = z * vert_radius;\n      i++;\n    }\n  }\n  vertexArray[i * 3 + 0] = 0;\n  vertexArray[i * 3 + 1] = 0;\n  vertexArray[i * 3 + 2] = vert_radius;\n  i++;\n\n  if (i !== num_vertices) {\n    console.error('bug in sphere mesh vertices generation');\n  }\n\n  const num_triangles = 2 * num_verts_around + (num_y_verts - 3) * num_verts_around * 2;\n\n  const elementArray = new Uint16Array(num_triangles * 3);\n\n  i = 0;\n\n  // bottom cone\n  for (let r = 0; r < num_verts_around; r++) {\n    elementArray[i * 3 + 0] = 0;\n    elementArray[i * 3 + 1] = 1 + r;\n    elementArray[i * 3 + 2] = 1 + (r + 1) % num_verts_around;\n    i++;\n  }\n  // stacks\n  for (let y = 0; y < num_y_verts - 3; y++) {\n    const v0_index = 1 + y * num_verts_around;\n    const v1_index = 1 + (y + 1) * num_verts_around;\n    for (let r = 0; r < num_verts_around; r++) {\n      elementArray[i * 3 + 0] = v0_index + r;\n      elementArray[i * 3 + 1] = v1_index + r;\n      elementArray[i * 3 + 2] = v1_index + (r + 1) % num_verts_around;\n      i++;\n      elementArray[i * 3 + 0] = v0_index + r;\n      elementArray[i * 3 + 1] = v1_index + (r + 1) % num_verts_around;\n      elementArray[i * 3 + 2] = v0_index + (r + 1) % num_verts_around;\n      i++;\n    }\n  }\n  // top cone\n  for (let r = 0; r < num_verts_around; r++) {\n    const v0_index = 1 + num_verts_around * (num_y_verts - 3);\n    const v1_index = 1 + num_verts_around * (num_y_verts - 2);\n    elementArray[i * 3 + 0] = v0_index + r;\n    elementArray[i * 3 + 1] = v1_index;\n    elementArray[i * 3 + 2] = v0_index + (r + 1) % num_verts_around;\n    i++;\n  }\n\n  if (i !== num_triangles) {\n    console.error('bug in sphere mesh indices generation');\n  }\n\n  const normalArray = new Float32Array(num_vertices * 3);\n\n  for (i = 0; i < num_triangles; i++) {\n    const i0 = elementArray[i * 3 + 0];\n    const i1 = elementArray[i * 3 + 1];\n    const i2 = elementArray[i * 3 + 2];\n    const p0 = vec3.fromValues(...[0, 1, 2].map(j => vertexArray[i0 * 3 + j]));\n    const p1 = vec3.fromValues(...[0, 1, 2].map(j => vertexArray[i1 * 3 + j]));\n    const p2 = vec3.fromValues(...[0, 1, 2].map(j => vertexArray[i2 * 3 + j]));\n    const u = vec3.create(); vec3.sub(u, p2, p0);\n    const v = vec3.create(); vec3.sub(v, p1, p0);\n    const n = vec3.create(); vec3.cross(n, u, v);\n    normalArray[i0 * 3 + 0] += n[0];\n    normalArray[i0 * 3 + 1] += n[1];\n    normalArray[i0 * 3 + 2] += n[2];\n    normalArray[i1 * 3 + 0] += n[0];\n    normalArray[i1 * 3 + 1] += n[1];\n    normalArray[i1 * 3 + 2] += n[2];\n    normalArray[i2 * 3 + 0] += n[0];\n    normalArray[i2 * 3 + 1] += n[1];\n    normalArray[i2 * 3 + 2] += n[2];\n  }\n  for (i = 0; i < num_vertices; i++) {\n    const v = vec3.fromValues(...[0, 1, 2].map(j => normalArray[i * 3 + j]));\n    vec3.normalize(v, v);\n    normalArray[i * 3 + 0] = v[0];\n    normalArray[i * 3 + 1] = v[1];\n    normalArray[i * 3 + 2] = v[2];\n  }\n\n  return {\n    vertexArray,\n    normalArray,\n    elementArray,\n  };\n}\n","import {mat4, vec3} from 'gl-matrix';\n\nimport {getGridPos, getProjectionMatrix, unprojectMousePos} from './view';\n\nexport class GameState {\n  constructor({cameraAngle, glCanvas, boardConfig}) {\n    this.viewInfo = this._calcViewInfo({cameraAngle, glCanvas});\n    this.mousePos = [0, 0];\n    this.mouse_gridPos = null;\n    this.nextPieceColour = 'black';\n    this.status = 'new-game'; // other values: 'in-progress', 'game-over'\n    this.boardConfig = boardConfig;\n\n    this.gridState = new Array(boardConfig.numLines * boardConfig.numLines);\n\n    for (let i = 0; i < this.gridState.length; i++) {\n      this.gridState[i] = null;\n    }\n  }\n\n  _calcViewInfo({cameraAngle, glCanvas}) {\n    const proj = getProjectionMatrix({glCanvas});\n\n    const viewmtx = mat4.create();\n    if (cameraAngle === 'default') {\n      mat4.translate(viewmtx, viewmtx, vec3.fromValues(0, -0.57, 1.1));\n      mat4.rotate(viewmtx, viewmtx, 25 * Math.PI / 180.0, vec3.fromValues(1, 0, 0));\n    } else if (cameraAngle === 'straight-down') {\n      mat4.translate(viewmtx, viewmtx, vec3.fromValues(0, 0.03, 1.3));\n    } else {\n      mat4.translate(viewmtx, viewmtx, vec3.fromValues(0, -0.85, 0.4));\n      mat4.rotate(viewmtx, viewmtx, 60 * Math.PI / 180.0, vec3.fromValues(1, 0, 0));\n    }\n\n    const invviewmtx = mat4.create();\n    mat4.invert(invviewmtx, viewmtx);\n\n    return {\n      proj,\n      viewmtx,\n      invviewmtx,\n    };\n  }\n\n  getGameStatus() {\n    return this.status;\n  }\n\n  getGridState(gx, gy) {\n    return this.gridState[gy * this.boardConfig.numLines + gx] || null;\n  }\n\n  update(message, ...params) {\n    switch (message) {\n      case 'onMouseMove':\n        return this._onMouseMove(...params);\n      case 'onClick':\n        return this._onClick(...params);\n      case 'setCameraAngle':\n        return this._setCameraAngle(...params);\n      default:\n        return [];\n    }\n  }\n\n  _setCameraAngle({cameraAngle, glCanvas}) {\n    this.viewInfo = this._calcViewInfo({cameraAngle, glCanvas});\n    return [['repaint']];\n  }\n\n  _setGridState(gx, gy, value) {\n    this.gridState[gy * this.boardConfig.numLines + gx] = value;\n  }\n\n  _onMouseMove(glCanvas, [mx, my]) {\n    const old_gridPos = this.mouse_gridPos;\n\n    this.mousePos = [mx, my];\n    this.mouse_gridPos = getGridPos(this.boardConfig, ...unprojectMousePos(this.viewInfo, [\n      this.mousePos[0] / (glCanvas.width - 1),\n      this.mousePos[1] / (glCanvas.height - 1),\n    ]));\n\n    if ((old_gridPos && old_gridPos[0]) !== (this.mouse_gridPos && this.mouse_gridPos[0]) ||\n        (old_gridPos && old_gridPos[1]) !== (this.mouse_gridPos && this.mouse_gridPos[1])) {\n      return [['repaint']];\n    } else {\n      return [];\n    }\n  }\n\n  _onClick() {\n    const commands = [];\n    if (this.mouse_gridPos !== null && this.nextPieceColour !== null) {\n      const v = this.getGridState(this.mouse_gridPos[0], this.mouse_gridPos[1]);\n      if (v === null) {\n        this._setGridState(this.mouse_gridPos[0], this.mouse_gridPos[1], {\n          colour: this.nextPieceColour,\n          isGlowing: false,\n        });\n        if (this._checkVictory(this.mouse_gridPos[0], this.mouse_gridPos[1], this.nextPieceColour)) {\n          commands.push(['incrementWinCount', this.nextPieceColour]);\n          this.nextPieceColour = null;\n          this.status = 'game-over';\n        } else {\n          this.nextPieceColour = this.nextPieceColour === 'white' ? 'black' : 'white';\n          this.status = 'in-progress';\n          commands.push(['nextPlayer', this.nextPieceColour]);\n        }\n        commands.push(['repaint']);\n      }\n    }\n    return commands;\n  }\n\n  // check for victory condition.\n  // coords passed are the new piece placed (we only need to check around that)\n  // TODO - also check if the board is full (draw)\n  _checkVictory(gx, gy, colour) {\n    const check = (xstep, ystep) => {\n      let num = 0;\n      for (let i = -4; i <= 5; i++) {\n        const value = this.getGridState(\n          gx + i * xstep,\n          gy + i * ystep,\n        );\n        if (value !== null && value.colour === colour) {\n          num++;\n        } else if (num >= 5) {\n          i--;\n          while (num-- > 0) {\n            this.getGridState(\n              gx + (i - num) * xstep,\n              gy + (i - num) * ystep,\n            ).isGlowing = true;\n          }\n          return true;\n        } else {\n          num = 0;\n        }\n      }\n    };\n    return check(1, 0) || // left to right\n           check(0, 1) || // top to bottom\n           check(1, 1) || // bottom-left to top-right\n           check(-1, 1); // bottom-right to top-left\n  }\n}\n","import {drawScene} from './draw';\nimport {drawSetup} from './draw-setup';\nimport {GameState} from './gameplay';\n\nconst boardConfig = {\n  numLines: 15,\n  imageDim: 512, // width/height of image\n  imageMargin: 32, // number of pixels around the grid\n  worldDim: 1, // world diameter of board (including margin)\n};\n\nconst persistentState = {\n  cameraAngle: 'default',\n  blackPlayer: 'Player 1',\n  whitePlayer: 'Player 2',\n  wins: {\n    'Player 1': 0,\n    'Player 2': 0,\n  },\n};\n\n///////\n\nwindow.addEventListener('load', startup, false);\n\nfunction startup() {\n  const glCanvas = document.getElementById('glcanvas');\n  const gl = glCanvas.getContext('webgl');\n\n  // try to make canvas full width of browser window\n  const fullWidth = (() => {\n    // https://stackoverflow.com/questions/3437786/get-the-size-of-the-screen-current-web-page-and-browser-window\n    const w = window;\n    const d = document;\n    const e = d.documentElement;\n    const g = d.getElementsByTagName('body')[0];\n    const x = w.innerWidth || e.clientWidth || g.clientWidth;\n    return x;\n  })();\n  if (fullWidth > glCanvas.width) {\n    glCanvas.width = fullWidth;\n  }\n\n  const renderState = drawSetup(glCanvas, gl, boardConfig);\n\n  let gameState = new GameState({cameraAngle: persistentState.cameraAngle, glCanvas, boardConfig});\n\n  glCanvas.addEventListener('mousemove', (event) => {\n    const commands = gameState.update('onMouseMove', glCanvas, getNoPaddingNoBorderCanvasRelativeMousePosition(event));\n    runCommands(renderState, gameState, commands);\n  });\n  glCanvas.addEventListener('mousedown', () => {\n    const commands = gameState.update('onClick');\n    runCommands(renderState, gameState, commands);\n  });\n  // firefox doesn't reset selected option on refresh, so do it manually\n  document.getElementById('camera-angle-control').value = 'default';\n  document.getElementById('camera-angle-control').addEventListener('change', (e) => {\n    persistentState.cameraAngle = e.target.value;\n    const commands = gameState.update('setCameraAngle', {cameraAngle: e.target.value, glCanvas});\n    runCommands(renderState, gameState, commands);\n  });\n  document.getElementById('start-new-game-button').addEventListener('click', () => {\n    let switchColours = true;\n    switch (gameState.getGameStatus()) {\n      case 'new-game':\n        break;\n      case 'in-progress':\n        if (!confirm('Really start new game?')) {\n          break;\n        }\n        switchColours = false;\n      case 'game-over':\n        if (switchColours) {\n          let tmp = persistentState.blackPlayer;\n          persistentState.blackPlayer = persistentState.whitePlayer;\n          persistentState.whitePlayer = tmp;\n        }\n        gameState = new GameState({cameraAngle: persistentState.cameraAngle, glCanvas, boardConfig});\n        runCommands(renderState, gameState, [\n          ['repaint'],\n          ['nextPlayer', 'black'],\n        ]);\n        break;\n    }\n  });\n  // TODO - update canvas width on resize\n\n  runCommands(renderState, gameState, [['nextPlayer', 'black']]);\n  drawScene(renderState, gameState, boardConfig);\n}\n\nfunction runCommands(renderState, gameState, commands) {\n  const commandHandlers = {\n    repaint() {\n      window.requestAnimationFrame(() => {\n        drawScene(renderState, gameState, boardConfig);\n      });\n    },\n    nextPlayer(colour) {\n      const el = document.getElementById('message');\n      el.className = '';\n      switch (colour) {\n        case 'black':\n          el.innerText = persistentState.blackPlayer + ' - black';\n          break;\n        case 'white':\n          el.innerText = persistentState.whitePlayer + ' - white';\n          break;\n      }\n    },\n    incrementWinCount(colour) {\n      let playerId;\n      switch (colour) {\n        case 'black':\n          playerId = persistentState.blackPlayer;\n          break;\n        case 'white':\n          playerId = persistentState.whitePlayer;\n          break;\n        default:\n          throw new Error('bad colour');\n      }\n      const n = ++persistentState.wins[playerId];\n      let el = document.getElementById('message');\n      el.className = 'highlighted';\n      switch (playerId) {\n        case 'Player 1':\n          el.innerText = 'Player 1 wins';\n          el = document.getElementById('player-1-wins');\n          break;\n        case 'Player 2':\n          el.innerText = 'Player 2 wins';\n          el = document.getElementById('player-2-wins');\n          break;\n        default:\n          throw new Error('bad playerid');\n      }\n      el.innerText = n === 1 ? '1 win' : n + ' wins';\n    }\n  };\n\n  for (let [cmd, ...cmdArgs] of commands) {\n    // TODO don't repaint multiple times?\n    if (cmd in commandHandlers) {\n      commandHandlers[cmd](...cmdArgs);\n    }\n  }\n}\n\n// these two functions from here:\n// https://stackoverflow.com/questions/42309715/how-to-correctly-pass-mouse-coordinates-to-webgl\nfunction getRelativeMousePosition(event, target) {\n  target = target || event.target;\n  var rect = target.getBoundingClientRect();\n\n  return {\n    x: event.clientX - rect.left,\n    y: event.clientY - rect.top,\n  }\n}\n\n// assumes target or event.target is canvas\nfunction getNoPaddingNoBorderCanvasRelativeMousePosition(event, target) {\n  target = target || event.target;\n  const pos = getRelativeMousePosition(event, target);\n\n  return [\n    pos.x * target.width  / target.clientWidth,\n    pos.y * target.height / target.clientHeight,\n  ];\n}\n"],"sourceRoot":""}